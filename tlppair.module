<?php
/**
 * @file
 * A field type that allows the creation of arbitrary pairs of data.
 */

/**
 * ************************************************************
 * Field information
 * ************************************************************
 */

/**
 * Implements hook_field_info().
 */
function tlppair_field_info () {
  return array(
    'tlppair' => array(
      'label'             => t('Arbitrary pair'),
      'description'       => t('A field that can contain pair data'),
      'default_widget'    => 'tlppair_widget',
      'default_formatter' => 'tlppair_formatter',
    ),
  );
}

/**
 * Implements hook_field_validate().
 */
function tlppair_field_validate ($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  // do nothing
}

/**
 * Implements hook_field_is_empty().
 */
function tlppair_field_is_empty ($item, $field) {
  return ( empty($item['tlppair_val_1']) and empty($item['tlppair_val_2']) );
}

/**
 * ************************************************************
 * Widget (entry) information
 * ************************************************************
 */

/**
 * Implements hook_field_widget_info().
 */
function tlppair_field_widget_info () {
  return array(
    'tlppair_widget' => array(
      'label'       => t('Arbitrary pair entry field'),
      'field types' => array('tlppair'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function tlppair_field_widget_form (&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $val1 = isset($items[$delta]['tlppair_val_1']) ? $items[$delta]['tlppair_val_1'] : '';
  $val2 = isset($items[$delta]['tlppair_val_2']) ? $items[$delta]['tlppair_val_2'] : '';

  $widget = array(
    '#type' => 'container',
    '#tree' => TRUE,
    '#attributes' => array('class' => array('tlppair_widget_attribute')),
    '#attached' => array(
      'css' => array(drupal_get_path('module', 'tlppair') . '/tlppair.css'),
    ),
    'tlppair_val_1' => $element + array(
      '#type' => 'textfield',
      '#size' => 30,
      '#default_value' => $val1,
      '#maxlength' => 255,
    ),
    'tlppair_val_2' => $element + array(
      '#type' => 'textfield',
      '#size' => 30,
      '#default_value' => $val2,
      '#maxlength' => 255,
    )
  );

  return $widget;
}

/**
 * ************************************************************
 * Formatter (display) information
 * ************************************************************
 */

/**
 * Implements hook_field_formatter_info().
 */
function tlppair_field_formatter_info () {
  return array(
    'tlppair_formatter' => array(
      'label'       => t('Formatter for pair field'),
      'field types' => array('tlppair'),
    )
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function tlppair_field_formatter_view ($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  $element = array(
    '#theme' => 'tlppair_display',
    'items' => $items,
  );

  return $element;
}

/**
 * ************************************************************
 * Theme information
 * ************************************************************
 */

function tlppair_theme () {
  return array(
    'tlppair_display' => array(
      //'render element' => 'pairs',
      'variables' => array('items' => NULL),
    ),
  );
}

function theme_tlppair_display ($variables) {
  $rows = array();
  foreach ($variables['items'] as $r) {
    $rows[] = array(
      $r['tlppair_val_1'],
      $r['tlppair_val_2'],
    );
  }

  return theme('table', array(
    'rows' => $rows,
    'attributes' => array('class' => array('tlppair_table')),
  ));
}
